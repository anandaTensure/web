#This is the development branch CI that will run and deploy the frontend to the S3 dev bucket

name: Production Frontend CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop-b branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # strategy:
    #  matrix:
    #    node-version: [14.17.5]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Use the node version specified in the strategy
      #- name: Use Node.js ${{ matrix.node-version }}
      #  uses: actions/setup-node@v2
      #  with:
      #    node-version: ${{ matrix.node-version }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git checkout
        uses: actions/checkout@v3

      # Remove node_modules and package-lock.json to assure we're grabbing the latest every time
      - name: Remove node_modules
        run: rm -rf node_modules

      - name: Remove package-lock.json
        run: rm -rf package-lock.json

      # Read node version from package.json
      - name: Read Node.js version from package.json
        id: node_version
        run: |
          echo "NODE_VERSION=$(cat package.json | jq -r '.engines.node')" >> $GITHUB_ENV

      # Use Node.js version from package.json
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Install Yarn globally if not available
      - name: Install Yarn
        run: npm install -g yarn

      # Install packages using Yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Run the mobiscroll CLI install command
      #- name: Install Mobiscroll CLI
      #  run: |
      #    npm install -g @mobiscroll/cli

      # Run the mobiscroll v5 config
      #- name: Mobiscroll React v5 Config
      #  run: |
      #    mobiscroll config react --css --version=5

      # Install packages
      # - name: Install packages
      #   run: |
      #     npm install

      # Temporary fix to pull node_modules from s3 until npm install is working again
      #- name: Download node_modules.zip from S3
      #  run: aws s3 cp s3://managebee-public-resources/prod/ui/node_modules.zip ./node_modules.zip
      #  env:
      #    AWS_S3_BUCKET: ${{ secrets.AWS_PRODUCTION_BUCKET_NAME }}
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #    AWS_REGION: ${{ secrets.AWS_REGION }}

      #- name: Unzip node_modules
      #  run: unzip node_modules.zip

      #- name: Change node_modules permissions
      #  run: chmod +x node_modules/.bin/react-scripts

      # Build an optimized production build
      - name: Building production app
        run: |
          unset CI
          REACT_APP_API_URL=production yarn build

      # Deploy to the S3 server
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_PRODUCTION_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{ secrets.AWS_REGION_PROD }}
          SOURCE_DIR: 'build'

      # Invalidate Cloudfront (this action)
      - name: invalidate
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.PROD_DISTRIBUTION }}
          PATHS: '/*'
          AWS_REGION: ${{ secrets.AWS_REGION_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
